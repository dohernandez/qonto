syntax = "proto3";

option go_package = "github.com/dohernandez/qonto/pkg/api";

package api.qonto;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/empty.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Qonto"
    version: "1.0"
    description: "Service that performance transfers."
  }
  schemes: HTTP;
  consumes: "application/json"
  produces: "application/json"
};

// The API manages transfers.
service QontoService {
  // TransferBulk performs given transfers.
  //
  // Receives a request with bulk of transfer to perform. Responses whether the transfer were done successfully or not, due to:
  // - account not found
  // - not enough funds in the account
  // - internal server.
  rpc TransferBulk(TransferBulkRequest) returns (google.protobuf.Empty) {
    // Client example (Assuming the service is hosted at the given 'DOMAIN_NAME'):
    // Client example:
    //   curl -d '{...}' http://DOMAIN_NAME/v1/transfer/bulk
    option (google.api.http) = {
      post : "/v1/transfer/bulk"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "201"
        value: {
          description: "Transfers performed."
          examples: {
            key: "application/json"
            value: '{}'
          }
        }
      }
      responses: {
        key: "400"
        value: {
          description: "Account not found.";
          schema: {
            json_schema: {
              ref: ".google.rpc.Status"
            }
          }
        }
      }
      responses: {
        key: "422"
        value: {
          description: "Request denied, not enough funds in the account.";
          schema: {
            json_schema: {
              ref: ".google.rpc.Status"
            }
          }
        }
      }
      responses: {
        key: "500"
        value: {
          description: "An unexpected error response."
          schema: {
            json_schema: {
              ref: ".google.rpc.Status"
            }
          }
        }
      }
    };
  }
}

message TransferBulkRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "TransferBulk"
      description: "Request message to process bulk transfer."
      required: ["organization_name", "organization_bic", "organization_iban", "credit_transfers"]
    }
  };

  // Organization name.
  string organization_name = 1;
  // Uniquely identify the Qonto customer's bic account.
  string organization_bic = 2;
  // Uniquely identify the Qonto customer's iban account.
  string organization_iban = 3;
  // Transfer rows.
  repeated CreditTransfersRow credit_transfers = 4;

  message CreditTransfersRow {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
      json_schema: {
        title: "CreditTransfersRow"
        description: "Transfers."
        required: ["amount", "currency", "counterparty_name", "counterparty_bic", "counterparty_iban", "description"]
      }
    };
    // The amount of the individual transfer.
    double amount = 1;
    // The currency of the transfer.
    string currency = 2;
    // Represent the name of the counterparty.
    string counterparty_name = 3;
    // Represent the account bic of the counterparty.
    string counterparty_bic = 4;
    // Represent the account iban of the counterparty.
    string counterparty_iban = 5;
    // Description of the transfer.
    string description = 6;
  }
}
