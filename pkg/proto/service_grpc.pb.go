// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QontoServiceClient is the client API for QontoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QontoServiceClient interface {
	// TransferBulk performs given transfers.
	//
	// Receives a request with bulk of transfer to perform. Responses whether the transfer were done successfully or not, due to:
	// - account not found
	// - not enough funds in the account
	// - internal server.
	TransferBulk(ctx context.Context, in *TransferBulkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type qontoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQontoServiceClient(cc grpc.ClientConnInterface) QontoServiceClient {
	return &qontoServiceClient{cc}
}

func (c *qontoServiceClient) TransferBulk(ctx context.Context, in *TransferBulkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.qonto.QontoService/TransferBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QontoServiceServer is the server API for QontoService service.
// All implementations must embed UnimplementedQontoServiceServer
// for forward compatibility
type QontoServiceServer interface {
	// TransferBulk performs given transfers.
	//
	// Receives a request with bulk of transfer to perform. Responses whether the transfer were done successfully or not, due to:
	// - account not found
	// - not enough funds in the account
	// - internal server.
	TransferBulk(context.Context, *TransferBulkRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedQontoServiceServer()
}

// UnimplementedQontoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQontoServiceServer struct {
}

func (UnimplementedQontoServiceServer) TransferBulk(context.Context, *TransferBulkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferBulk not implemented")
}
func (UnimplementedQontoServiceServer) mustEmbedUnimplementedQontoServiceServer() {}

// UnsafeQontoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QontoServiceServer will
// result in compilation errors.
type UnsafeQontoServiceServer interface {
	mustEmbedUnimplementedQontoServiceServer()
}

func RegisterQontoServiceServer(s grpc.ServiceRegistrar, srv QontoServiceServer) {
	s.RegisterService(&QontoService_ServiceDesc, srv)
}

func _QontoService_TransferBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QontoServiceServer).TransferBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qonto.QontoService/TransferBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QontoServiceServer).TransferBulk(ctx, req.(*TransferBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QontoService_ServiceDesc is the grpc.ServiceDesc for QontoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QontoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.qonto.QontoService",
	HandlerType: (*QontoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransferBulk",
			Handler:    _QontoService_TransferBulk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
